How to experiment NFS end-to-end integrity?

Software
========
1. OS: Fedora20
We use Fedora because it contains the latest version of most packages, some of
which, such as Python2.7 and targetcli-fb, will be used.

It is just too plainful to do it on CentOS.  Even its latest version contain
very old packages.

2. Kernel: 3.14.17

Apply patches from <fsl-nfs-ganesha>/nfs4int/pi-patchset-v2/

The patch is adopted (with bug fix) from kernel patches
https://marc.info/?l=linux-mm&m=139567816228628&w=2


Create a virtualized SCSI disk using LIO tcm_loop
=================================================
http://linux-iscsi.org/wiki/Tcm_loop

We need "targetcli" to create a SCSI target (virtual disk). Make sure you use
the targetcli-fb from Andy Grover (https://github.com/agrover/targetcli-fb),
instead of targetcli from www.linux-iscsi.org.  Andy even have some videos
about how to use targetcli!  "targetcli" can be installed using yum; make sure
the version installed the targetcli-fb version.

We can create a PI-enabled 10MB device with a simple command:

	# targetcli restoreconfig pi-10MB-device-config.json

where "pi-10MB-device-config.json" config file is in our repo.  To customize
the settings, use the following three steps as an example:

1. Create a 10MB ramdisk backstore:

	# targetcli
	> cd /backstores/ramdisk
	ramdisk> create size=10MB rd1

2. Then enable DIX support of the ramdisk:

	echo 3 > /sys/kernel/config/target/core/rd_mcp_0/rd1/attrib/pi_prot_type

We choose to use type 3 of DIF, which only use the CRC guard tag (2 bytes).
The application tag and the reference tag are left intact.  So be careful when
using "dix -p g".

3. Create a lun (disk) out of the ramdisk.

	ramdisk> cd /loopback
	loopback> create
	loopback> cd naa.5001405eaf325048/luns
	luns> create /backstores/ramdisk/rd1

After this, you should be able to see a new 10MB device in "fdisk -l" output,
for example '/dev/sdb'.

Finally, let us verify that the integrity settings are correct:

	$ cat /sys/block/sdb/integrity/read_verify
	1
	$ cat /sys/block/sdb/integrity/write_generate
	1

After each reboot, you may restore your previous config:

	# targetcli restoreconfig /etc/target/saveconfig.json


Test passing DIX data from userspace to kernel
==============================================

1. Make sure the PI patch set is applied to the kernel.

2. Install libaio using "yum install libaio", or by compiling and installing
from the source code https://git.fedorahosted.org/cgit/libaio.git/

3. Compile and run

	# gcc -o dix dix.c -laio -L /usr/lib/

	# ./dix -p g -wr -s 10 /dev/sdb


Launch NFS-Ganesha
==================
0. Install packages:

	$ yum install cmake glog-devel protobuf-devel tbb-devel \
		jemalloc-devel krb5-devel cryptopp-devel libcap-devel \
		libaio-devel gflags-devel boost-system \
		boost-filesystem boost-regex

Manually install "google-test", and set env var:

	$ export GOOGLE_TEST=/path/to/google/test

1. Make sure NFS-Ganesha is built and installed:

	$ cd <fsl-nfs-ganesha>/src
	$ mkdir mybuild
	$ cd mybuild
	$ cmake -DCMAKE_BUILD_TYPE=Debug ..
	$ make
	$ sudo make install

NOTE: to build FSAL_SECNFS, make sure packages listed in
<fsl-nfs-ganesha>/src/FSAL/Stackable_FSALs/FSAL_SECNFS/README are installed.

2. Export the PI-enabled device

	# mkfs.ext4 /dev/sdb
	# mount /dev/sdb /nfsdata

Note that "/nfsdata" is the directory exported in the "vfs.2.1.ganesha.conf"
config file.

Then, let us create a test file that will be used in the pynfs test:

	# dd if=/dev/urandom of=/nfsdata/test.txt bs=4k count=2

3. Setup config file and launch NFS-Ganesha server

	# cp <fsl-nfs-ganesha>/secnfs/vfs.2.1.ganesha.conf /etc/ganesha
	# cp run-vfs.sh mybuild
	# ./run-vfs.sh &

4. Test from the clients using pynfs (optional)

4.1 Make sure you can mount the server NFS and see the "test.txt" we created in
Step 2.

	# mount -t nfs 130.245.126.233:/vfs0 /mnt
	# ls /mnt
	test.txt
	...
	# umount /mnt

where /vfs0 is the pseudo file system name in the "vfs.2.1.ganesha.conf" file.

4.2 install packages

	# yum install python-devel krb5-devel

4.3 Test

	# git clone user@git.fsl.cs.sunysb.edu:/scm/fslgit/fsl-pynfs.git
	# cd fsl-pynfs
	# python setup.py build
	# cd nfs4.1/
	# ./testserver.py --maketree --verbose 130.245.126.199:/vfs0 PIRd

If there is problem mounting, please refer to <nfs4sec>/doc/*.txt
user@git.fsl.cs.sunysb.edu:/scm/fslgit/nfs4sec.git for help.

5. Install thrift (>=0.9.2)

	# yum -y install libevent-devel zlib-devel openssl-devel
	# yum -y install java-1.8.0-openjdk-devel
	# yum -y install glib2-devel ant

Manually download thrift-0.9.2.tar.gz and install
	# ./configure --enable-tests=no --with-lua=no --prefix=/path/to/thrift
	# make && make install

Set env var (required by KURMA_FSAL compilation)
	# export THRIFT=/path/to/thrift

Generate code with /path/to/thrift/bin/thrift:

	# thrift -r -gen java Kurma.thrift	    // Java code
	# thrift -r -gen cpp Kurma.thrift	    // C++ code
	# thrift -r -gen c_glib Kurma.thrift	    // C code

To understand the kernel patch
==============================
Important kernel files:

	block/blk-integrity.c
	fs/aio.c
	fs/bio-integrity.c
	fs/direct-io.c
	scsi/sd_dif.c

Important functions:

	sd_dif_type3_generate()


References
==========

http://tools.ietf.org/html/draft-cel-nfsv4-end2end-data-protection-00

https://www.kernel.org/doc/ols/2008/ols2008v2-pages-151-156.pdf

http://thread.gmane.org/gmane.linux.kernel.aio.general/3904

http://www.spinics.net/lists/target-devel/msg06044.html
