diff --git a/src/secnfs/cache/FileCache.cpp b/src/secnfs/cache/FileCache.cpp
index 57bacf9..4eb0c91 100644
--- a/src/secnfs/cache/FileCache.cpp
+++ b/src/secnfs/cache/FileCache.cpp
@@ -20,7 +20,6 @@
 #include "util/protobuf.h"
 
 using boost::icl::interval_set;
-using secnfs::base::AddressLockReleaser;
 using secnfs::proto::FileCacheMeta;
 using secnfs::proto::FileExtentMeta;
 using secnfs::util::BinaryToBase64;
@@ -67,7 +66,7 @@ FileCache::FileCache(const Slice& handle, const std::string& cache_dir,
       remote_change_time_(remote_change_time) {}
 
 int FileCache::Create() {
-  std::lock_guard<std::mutex> lock(mutex_);
+  secnfs::util::LockGuard lock(mutex_);
   VLOG(1) << "creating " << file_path();
   return secnfs::util::CreateFile(file_path());
 }
@@ -78,7 +77,7 @@ ssize_t FileCache::Load() {
   CHECK_EQ(handle_, meta.file_handle());
   CHECK(ValidateMetadata(meta, file_path()));
 
-  std::lock_guard<std::mutex> lock(mutex_);
+  secnfs::util::LockGuard lock(mutex_);
   remote_change_time_ = meta.remote_change_time();
   for (const auto& ext : meta.extents()) {
     InsertExtent(ext.offset(), ext.length(), CacheState(ext.cache_state()));
@@ -135,13 +134,13 @@ ssize_t FileCache::ReadAndLockDirty(size_t max_length, DirtyExtent* extent,
   size_t length = extent->length();
   char* buf = new char[length];
   if (buf == nullptr) {
-    AddressLockReleaser r(address_lock_, mutex_, offset, length, false);
+    ReleaseAddressLock(offset, length, false);
     return -ENOMEM;
   }
 
   ssize_t ret = secnfs::util::PRead(file_path(), offset, length, buf);
   if (ret < 0) {
-    AddressLockReleaser r(address_lock_, mutex_, offset, length, false);
+    ReleaseAddressLock(offset, length, false);
     return ret;
   }
   CHECK_EQ(ret, length) << "partial write-back not supported";
@@ -256,7 +255,7 @@ ssize_t FileCache::Lookup(size_t offset, size_t length, char* buf,
                << ") from " << file_name_;
     return ret;
   }
-  std::lock_guard<std::mutex> lock(mutex_);
+  secnfs::util::LockGuard lock(mutex_);
   address_lock_.ReadUnlock(*cached_offset, *cached_length);
   *cached_length = std::min(*cached_length, static_cast<size_t>(ret));
 
@@ -271,10 +270,10 @@ ssize_t FileCache::InsertImpl(size_t offset, size_t length, const char* buf,
   ssize_t ret = secnfs::util::PWrite(file_path(), offset, length, buf);
   if (ret < 0) {
     LOG(ERROR) << "Cannot insert into " << file_name_;
-    AddressLockReleaser r(address_lock_, mutex_, offset, length, false);
+    ReleaseAddressLock(offset, length, false);
   } else {
     CHECK_EQ(ret, length) << "only part of the buf is written";
-    mutex_.lock();
+    mutex_.Lock();
     FileCacheLockReleaser releaser(hold_lock ? nullptr : this);
     address_lock_.WriteUnlock(offset, length);
     ret = InsertExtent(offset, length, state);
@@ -285,12 +284,12 @@ ssize_t FileCache::InsertImpl(size_t offset, size_t length, const char* buf,
 void FileCache::RepeatUntilSuccess(std::function<bool()> action) {
   useconds_t wait = 1000;  // 1ms
   while (true) {
-    mutex_.lock();
+    mutex_.Lock();
     if (action()) {
-      mutex_.unlock();
+      mutex_.Unlock();
       break;
     }
-    mutex_.unlock();
+    mutex_.Unlock();
     usleep(wait);
     // exponential backoff to 2 second
     if (wait < 2048000) wait <<= 1;
@@ -354,7 +353,7 @@ int FileCache::Commit(size_t offset, size_t length) {
   meta.set_newly_created(false);
   meta.set_remote_change_time(remote_change_time_);
   {
-    std::lock_guard<std::mutex> lock(mutex_);
+    secnfs::util::LockGuard lock(mutex_);
     for (const auto& kv : cached_extents_) {
       FileExtentMeta* ext_meta = meta.add_extents();
       ext_meta->set_offset(lower(kv.first));
@@ -377,7 +376,7 @@ ssize_t FileCache::InvalidateImpl(size_t offset, size_t length, bool deleted,
   bool has_dirty = false;
   size_t cached_file_length = 0;
   {
-    std::lock_guard<std::mutex> lock(mutex_);
+    secnfs::util::LockGuard lock(mutex_);
     ForEachExtent(offset, length,
                   [range, &overlap, &has_dirty](size_t l, size_t u,
                                                 const FileExtent& ext) {
@@ -394,7 +393,7 @@ ssize_t FileCache::InvalidateImpl(size_t offset, size_t length, bool deleted,
   if (!deleted && has_dirty) {
     LOG(ERROR) << "could not invalidate dirty cache within [" << offset << ", "
                << (offset + length) << ") of " << handle_;
-    AddressLockReleaser r(address_lock_, mutex_, offset, length, false);
+    ReleaseAddressLock(offset, length, false);
     return -1;
   }
 
@@ -406,12 +405,12 @@ ssize_t FileCache::InvalidateImpl(size_t offset, size_t length, bool deleted,
     if (ret < 0) {
       LOG(ERROR) << "could not punch hole at [" << offset << ", "
                  << (offset + length) << ") of " << handle_;
-      AddressLockReleaser r(address_lock_, mutex_, offset, length, false);
+      ReleaseAddressLock(offset, length, false);
       return ret;
     }
   }
 
-  mutex_.lock();
+  mutex_.Lock();
   FileCacheLockReleaser releaser(hold_lock ? nullptr : this);
   address_lock_.WriteUnlock(offset, length);
   if (overlap > 0) {
@@ -448,12 +447,12 @@ int FileCache::Clear(bool exiting) {
 }
 
 size_t FileCache::Size() {
-  std::lock_guard<std::mutex> lock(mutex_);
+  secnfs::util::LockGuard lock(mutex_);
   return size_;
 }
 
 size_t FileCache::DirtyDataSize() {
-  std::lock_guard<std::mutex> lock(mutex_);
+  secnfs::util::LockGuard lock(mutex_);
   return dirty_data_size_;
 }
 
diff --git a/src/secnfs/cache/FileCache.h b/src/secnfs/cache/FileCache.h
index 027c8cd..56c7af2 100644
--- a/src/secnfs/cache/FileCache.h
+++ b/src/secnfs/cache/FileCache.h
@@ -16,7 +16,6 @@
 
 #include <atomic>
 #include <list>
-#include <mutex>
 #include <string>
 #include <tuple>
 
@@ -24,9 +23,10 @@
 #include "cache/FileExtent.h"
 #include "cache/DirtyExtent.h"
 #include "capi/common.h"
-#include "port/thread_annotations.h"
 #include "util/slice.h"
+#include "util/mutex.h"
 #include "util/common.h"
+#include "port/thread_annotations.h"
 
 using secnfs::util::Slice;
 
@@ -76,24 +76,24 @@ class FileCache {
   }
 
   void Lock() ACQUIRE(mutex_) {
-    mutex_.lock();
+    mutex_.Lock();
   }
 
   void Unlock() RELEASE(mutex_) {
-    mutex_.unlock();
+    mutex_.Unlock();
   }
 
   /**
    * The caller should hold the mutex.
    */
-  void PushDirtyExtent(DirtyExtent* de) GUARDED_BY(mutex_);
+  void PushDirtyExtent(DirtyExtent* de) REQUIRES(mutex_);
 
   /**
    * The caller should hold the mutex.
    *
    * @return The next DirtyExtent, or nullptr if not any.
    */
-  DirtyExtent* PopDirtyExtent() GUARDED_BY(mutex_);
+  DirtyExtent* PopDirtyExtent() REQUIRES(mutex_);
 
   /**
    * Read the dirty extent around the range of the "extent".  The real resultant
@@ -208,7 +208,7 @@ class FileCache {
    * @return The new size of cached data in this FileCache after this insertion.
    */
   size_t InsertExtent(size_t offset, size_t length, CacheState state)
-      GUARDED_BY(mutex_);
+      REQUIRES(mutex_);
 
   void RepeatUntilSuccess(std::function<bool()> action) EXCLUDES(mutex_);
 
@@ -221,7 +221,7 @@ class FileCache {
   // @returns true if the whole operation is successful: (1) no match found, or
   // (2) a matched range is found and successfully locked.
   bool LookupAndLockRange(size_t offset, size_t length, size_t* cached_offset,
-                          size_t* cached_length) GUARDED_BY(mutex_);
+                          size_t* cached_length) REQUIRES(mutex_);
 
   /**
    * Iterate over each extent that overlaps with the specified range.
@@ -229,7 +229,7 @@ class FileCache {
   void ForEachExtent(size_t offset, size_t length,
                      std::function<void(size_t lower, size_t upper,
                                         const FileExtent& ext)> processor)
-      GUARDED_BY(mutex_) {
+      REQUIRES(mutex_) {
     size_t end = offset + length;
     auto it = cached_extents_.find(secnfs::util::make_interval(offset, length));
     while (it != cached_extents_.end() && it->first.lower() < end) {
@@ -238,6 +238,15 @@ class FileCache {
     }
   }
 
+  void ReleaseAddressLock(size_t offset, size_t length, bool isread) {
+    secnfs::util::LockGuard lock(mutex_);
+    if (isread_) {
+      lock_.ReadUnlock(offset_, length_);
+    } else {
+      lock_.WriteUnlock(offset_, length_);
+    }
+  }
+
   FileCache(const FileCache&) = delete;
   void operator=(const FileCache&) = delete;
 
@@ -250,7 +259,7 @@ class FileCache {
   // Should be const after one the FileCache is loaded or created.
   uint64_t remote_change_time_;
 
-  std::mutex mutex_;
+  secnfs::util::Mutex mutex_;
   boost::icl::interval_map<size_t, FileExtent> cached_extents_
       GUARDED_BY(mutex_);
 
